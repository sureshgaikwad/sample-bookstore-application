apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-gitops-repo
  namespace: sgaikwad
spec:
  description: Updates the GitOps repository with new image tag
  params:
  - name: git-url
    type: string
    description: GitOps repository URL
  - name: git-revision
    type: string
    description: GitOps repository branch
    default: main
  - name: app-path
    type: string
    description: Path to the application manifests in GitOps repo
  - name: image-name
    type: string
    description: Full image name with registry
  - name: image-tag
    type: string
    description: New image tag to deploy
  - name: git-user-name
    type: string
    description: Git user name for commits
    default: "Tekton Pipeline"
  - name: git-user-email
    type: string
    description: Git user email for commits
    default: "tekton@pipeline.local"

  workspaces:
  - name: source
    description: Workspace containing the GitOps repository
  - name: gitops-auth
    description: Workspace containing git credentials
    optional: true

  steps:
  - name: clone-gitops-repo
    image: alpine/git:latest
    script: |
      #!/bin/sh
      set -e

      cd $(workspaces.source.path)

      # Configure git
      git config --global user.name "$(params.git-user-name)"
      git config --global user.email "$(params.git-user-email)"
      git config --global --add safe.directory $(workspaces.source.path)

      # Clone the GitOps repository
      echo "Cloning GitOps repository: $(params.git-url)"
      git clone $(params.git-url) gitops-repo
      cd gitops-repo
      git checkout $(params.git-revision)

      echo "Repository cloned successfully"
      ls -la

  - name: update-image-tag
    image: alpine:latest
    script: |
      #!/bin/sh
      set -e

      # Install required tools
      apk add --no-cache sed

      cd $(workspaces.source.path)/gitops-repo/$(params.app-path)

      echo "Current directory contents:"
      ls -la

      # Find and update deployment manifests
      NEW_IMAGE="$(params.image-name):$(params.image-tag)"
      echo "Updating image to: $NEW_IMAGE"

      # Process each YAML file using sed instead of yq
      for file in *.yaml *.yml; do
        if [ -f "$file" ]; then
          echo "Processing file: $file"
          
          # Create backup
          cp "$file" "$file.backup"
          
          # Use sed to replace image references
          # This handles both direct image references and containers array
          sed -i "s|image: quay\.io/sureshgaikwad/app:.*|image: $NEW_IMAGE|g" "$file"
          
          # Check if file was actually modified
          if ! diff -q "$file" "$file.backup" > /dev/null 2>&1; then
            echo "Successfully updated $file"
            echo "Updated content:"
            grep -A2 -B2 "image:" "$file" || echo "No image lines found in grep"
          else
            echo "No changes needed in $file"
          fi
          
          # Remove backup
          rm -f "$file.backup"
        fi
      done

      echo "Files after update:"
      ls -la

  - name: commit-and-push
    image: alpine/git:latest
    script: |
      #!/bin/sh
      set -e

      cd $(workspaces.source.path)/gitops-repo

      # Configure git
      git config --global user.name "$(params.git-user-name)"
      git config --global user.email "$(params.git-user-email)"
      git config --global --add safe.directory $(workspaces.source.path)/gitops-repo

      # Configure authentication if credentials are available
      if [ -d "$(workspaces.gitops-auth.path)" ] && [ -f "$(workspaces.gitops-auth.path)/.git-credentials" ]; then
        echo "Configuring git credentials"
        git config --global credential.helper store
        cp $(workspaces.gitops-auth.path)/.git-credentials ~/.git-credentials
      elif [ -d "$(workspaces.gitops-auth.path)" ] && [ -f "$(workspaces.gitops-auth.path)/username" ] && [ -f "$(workspaces.gitops-auth.path)/password" ]; then
        echo "Configuring git credentials from basic auth"
        USERNAME=$(cat $(workspaces.gitops-auth.path)/username)
        PASSWORD=$(cat $(workspaces.gitops-auth.path)/password)
        echo "https://$USERNAME:$PASSWORD@github.com" > ~/.git-credentials
        git config --global credential.helper store
      fi

      # Check if there are changes
      echo "Checking for changes..."
      git status
      
      if git diff --quiet; then
        echo "No changes to commit"
        exit 0
      fi

      # Show the diff
      echo "Changes detected:"
      git diff

      # Stage and commit changes
      git add .
      git commit -m "Update $(params.app-path) image to $(params.image-name):$(params.image-tag)

      Automated update from Tekton pipeline
      Source commit: $(params.image-tag)"

      # Push changes
      echo "Pushing changes to GitOps repository"
      git push origin $(params.git-revision)

      echo "GitOps repository updated successfully!"
